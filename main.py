from telebot import *
import sqlite3
from auth import auth
from info import *

bot = TeleBot('5739731982:AAGctJkddQ3ua_b9LmnCuW7H2vP9IEdSMsA')
conn = sqlite3.connect('db.db3', check_same_thread=False)
cursor = conn.cursor()


def pushDB(uid: int, username: str, subdomain: str, login: str, password: str):
    cursor.execute(
                   'INSERT INTO db (user_id, username, subdomain, login, password) VALUES (?, ?, ?, ?, ?)',
                   (uid, username, subdomain, login, password)
                   )
    conn.commit()


def Markup_MainMenu(user_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ', callback_data='getinfo_'+str(user_id)))
    markup.add(types.InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é', callback_data='getjournal_'+str(user_id)))
    return markup


@bot.message_handler(commands=['start'])
@bot.callback_query_handler(func=lambda call: call.data == "go_back")
def startMsg(msg):
    global chat_id
    global user_id
    if type(msg) == types.CallbackQuery:
        chat_id = msg.message.chat.id
        user_id = msg.message.json['chat']['id']
    else:
        chat_id = msg.chat.id
        user_id = msg.from_user.id
    if not cursor.execute(f"SELECT user_id FROM db WHERE user_id='{user_id}'").fetchone():
        msg = bot.send_message(
                                chat_id,
                                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å eljur —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –¥–æ–º–µ–Ω —à–∫–æ–ª—ã (arh-licey –¥–ª—è arh-licey.eljur.ru)\n ",
                                "–í–≤–µ–¥–∏—Ç–µ —Å—É–±–¥–æ–º–µ–Ω:"
        )
        bot.register_next_step_handler(msg, getSub)
    else:
        subdomain = cursor.execute(f"SELECT subdomain FROM db WHERE user_id='{user_id}'").fetchone()[0]
        login = cursor.execute(f"SELECT login FROM db WHERE user_id='{user_id}'").fetchone()[0]
        password = cursor.execute(f"SELECT password FROM db WHERE user_id='{user_id}'").fetchone()[0]
        info = getInfo(subdomain, auth(subdomain, {'username': login, 'password': password})['session'])
        surname, name = info['–§–∞–º–∏–ª–∏—è'], info['–ò–º—è']
        text = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {surname} {name}."
        if type(msg) != types.CallbackQuery:
            bot.send_message(chat_id, text, reply_markup=Markup_MainMenu(user_id))
        else:
            message_id, chat_id = msg.message.json['message_id'], msg.message.chat.id
            bot.edit_message_text(text, chat_id=chat_id, message_id=message_id, reply_markup=Markup_MainMenu(user_id))


@bot.callback_query_handler(func=lambda call: call.data[:7] == 'getinfo')
def getInfo_Main(call):
    message_id, chat_id = call.message.json['message_id'], call.message.chat.id
    subdomain_ = cursor.execute(f"SELECT subdomain FROM db WHERE user_id='{call.data.split('_')[1]}'").fetchone()[0]
    login_ = cursor.execute(f"SELECT login FROM db WHERE user_id='{call.data.split('_')[1]}'").fetchone()[0]
    password = cursor.execute(f"SELECT password FROM db WHERE user_id='{call.data.split('_')[1]}'").fetchone()[0]
    info = getInfo(subdomain_, auth(subdomain_, {'username': login_, 'password': password})['session'])
    text = ';\n'.join(f"{x}: {y}" for x, y in info.items())
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data="go_back"))
    bot.edit_message_text(text, chat_id=chat_id, message_id=message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data[:10] == 'getjournal')
def getJournal_Main(call):
    message_id, chat_id = call.message.json['message_id'], call.message.chat.id
    subdomain_ = cursor.execute(f"SELECT subdomain FROM db WHERE user_id='{call.data.split('_')[1]}'").fetchone()[0]
    login_ = cursor.execute(f"SELECT login FROM db WHERE user_id='{call.data.split('_')[1]}'").fetchone()[0]
    password = cursor.execute(f"SELECT password FROM db WHERE user_id='{call.data.split('_')[1]}'").fetchone()[0]
    journal = getJournal(subdomain_, auth(subdomain_, {'username': login_, 'password': password})['session'])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data="go_back"))
    text = ''
    for day, lessons in journal.items():
        text += f"{day}, {lessons['date']}:\n"
        for num, lesson in lessons['lessons'].items():
            text += f"‚îî‚îÄ‚îÄ {num if num != '' else '–í–Ω–µ—É—Ä–æ—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å'}. {lesson['name']} üè†: {str(lesson['hometask']).replace('None', '–ù–µ—Ç')} ‚úî: {str(lesson['mark'] if lesson['mark'] != '' else '–ù').replace('None', '–ù–µ—Ç')}\n"
        text += '\n'
    bot.edit_message_text(text, chat_id=chat_id, message_id=message_id, reply_markup=markup)



def getSub(msg):
    global subdomain
    subdomain = msg
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    bot.register_next_step_handler(msg, getLog)


def getLog(msg):
    global login
    login = msg
    msg = bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(msg, authFinal)


def authFinal(msg):
    authResult = auth(subdomain.text,
                {
                    'username': login.text,
                    'password': msg.text
                })
    if not authResult['result']:
        bot.send_message(msg.chat.id, authResult['error_msg'] + '\n –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑.')
    else:
        pushDB(
               msg.from_user.id,
               msg.from_user.username,
               subdomain.text,
               login.text,
               msg.text,
               )

        bot.send_message(msg.chat.id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É–¥–∞—á–Ω–æ.")
    startMsg(msg)


bot.polling(none_stop=True)


#todo: –≥–µ–Ω –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è + —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º/—Å–ª–µ–¥ –Ω–µ–¥–µ–ª—è–º
#todo: —Ñ-–∏—è –Ω–∞ –æ—Ü–µ–Ω–∫–∏ –∑–∞ —á–µ—Ç–≤–µ—Ä—Ç—å/–∏—Ç–æ–≥–æ–≤—ã–µ/–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å (–µ—Å–ª–∏ –Ω–µ –µ–±–Ω—É—Å—å, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –≤–µ–≥–æ —ç—Ç–æ–≥–æ)
#todo: —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –≤ –±–æ—Ç–µ –ø—Ä–∏ 400 –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏—Ü–∞—É–∏–∏ –∏–∑ –±–¥ (–¥–µ–ª–æ–≥–∏–Ω)

